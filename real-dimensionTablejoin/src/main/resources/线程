线程不安全表现为多个线程同时修改共享变量
原因：表层是线程之间没有通信，里面是每个线程有自己的工作内存，都读取主内存的共享变量，拿一个副本到自己工作内存，修改
之后写入到主内存
两个线程分别读取了t的值，假设此时t的值为0，并且把t的值存到了各自的高速缓存中，然后线程1对t进行了加1操作，此时t的值为1，并且把t的值写回到主存中。但是线程2中高速缓存的值还是0，进行加1操作之后，t的值还是为1，然后再把t的值写回主存。
此时，就出现了线程不安全问题了。

所以加锁，一个读取修改完之后下一个进去
一个线程写一个线程读，应该不是多线程问题，但会出现脏读，比如读了一般给修改了

AtomicReference   对应普通的对象引用
AtomicInteger  是对整数的封装
原子类操作，一个线程在操作时不受其他线程干扰